<h1>User Management</h1>

<label>Name:</label>
<input type="text" #nameInput>
<label>Email:</label>
<input type="email" #emailInput>
<button (click)="addUser(nameInput.value, emailInput.value)">Add User</button>
<br>

<ul>
  <li *ngFor="let user of users; let i = index">
    {{ user.name }} ({{ user.email }})
    <button (click)="editUser(i)">Edit</button>
    <button (click)="deleteUser(i)">Delete</button>
  </li>
</ul>

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, RouterOutlet],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'pgm07';
  users: { name: string, email: string }[] = [
    { name: "John Doe", email: "john@example.com" },
    { name: "Jane Doe", email: "jane@example.com" }
  ];

  addUser(name: string, email: string): void {
    name = name.trim();
    email = email.trim();
    if (name && email) {
      this.users.push({ name: name, email: email });
    }
  }

  editUser(index: number): void {
    const editedName = prompt("Edit Name", this.users[index].name);
    const editedEmail = prompt("Edit Email", this.users[index].email);
    if (editedName !== null && editedEmail !== null) {
      const trimmedName = editedName.trim();
      const trimmedEmail = editedEmail.trim();
      if (trimmedName !== '' && trimmedEmail !== '') {
        this.users[index].name = trimmedName;
        this.users[index].email = trimmedEmail;
      } else {
        alert("Name and Email cannot be empty!");
      }
    }
  }

  deleteUser(index: number): void {
    const confirmDelete = confirm("Are you sure you want to delete this user?");
    if (confirmDelete) {
      this.users.splice(index, 1);
    }
  }
}
